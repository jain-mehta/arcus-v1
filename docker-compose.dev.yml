version: '3.9'

services:
  postgres:
    image: postgres:16-alpine
    container_name: arcus-postgres
    environment:
      POSTGRES_DB: arcus_control
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/control:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - arcus-net

  redis:
    image: redis:7-alpine
    container_name: arcus-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - arcus-net

  minio:
    image: minio/minio:latest
    container_name: arcus-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/minio_data
    command: server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - arcus-net

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: arcus-app
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/arcus_control
      REDIS_URL: redis://redis:6379
      NEXT_PUBLIC_MINIO_ENDPOINT: minio:9000
      NEXT_PUBLIC_MINIO_BUCKET: arcus-storage
      SUPABASE_JWKS_URL: ${SUPABASE_JWKS_URL}
      PERMIFY_URL: ${PERMIFY_URL}
      PERMIFY_API_KEY: ${PERMIFY_API_KEY}
      NEXT_PUBLIC_FIREBASE_API_KEY: ${NEXT_PUBLIC_FIREBASE_API_KEY}
      NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN}
      NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${NEXT_PUBLIC_FIREBASE_PROJECT_ID}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - arcus-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  arcus-net:
    driver: bridge
